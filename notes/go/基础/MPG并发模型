# 进程与线程
![6c3516e0fc13cbb3a99ceedb2c28e386.png](:/f9ea903ffa954fba92ee9bd3d346dce3)
- 任何语言的并行，到操作系统层面，都是内核线程的并行。
- 同一个进程内的多个线程 共享系统的资源，进程的创建、销毁、切换比线程大很多。
- 从进程到线程再到携程，其实是一个 **不断共享，不断减少切换成本的过程** 。
> Python的并发模型：**一个进程对应一个内核线程**，(当用python写多线程的时候，你会发现cpu始终是用了一个核，超不过一个核，如果想用多个核，必须开多进程才可以):
![cf3873b43fb43bc4d817f784f4779df9.png](:/cda05a2872704952ac9aef938785edcd)

> Java，C++的并发模型：**一个线程对应一个内核线程**
> ![8cc6d22f85d374659ad913ce61604c39.png](:/d656beadf8da41f6aa63e61f214b34c5)

> Golang的并发模型：线程和内核线程是m:n的关系
> ![488160f654ce9492df6fa197ddc41975.png](:/dd3c64e9285f4b81ade536686a7d3d71)

# 协程 VS 线程
![a051da1d0b050020c71bcbded112ca9c.png](:/7e5421352cf1473e8bc509bbcf1ac0f4)

切换线程需要保存寄存器状态（保存cpu当前手头工作的状态）
![f156830d8e919898a8163e9bbae8b283.png](:/b22e91e5be874983855fa89c3dd1d2dd)
